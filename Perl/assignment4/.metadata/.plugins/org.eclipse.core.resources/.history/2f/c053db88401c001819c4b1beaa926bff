#!/usr/bin/perl
use strict;
use warnings;
use feature qw(say);
use lib '/home/ashmi/Documents/BINF6200/a4';
use Assignment4::MyIO qw(getFh);

#######################################################################################
# File 		  : categories.pl
# History     : 24-Feb-2018 (Ashmi Parikh) made the program

# Description : This program counts how many genes are in each category (1.1, 1.2, 2.1 etc.)
# based on data from the chr21_genes.txt file. The program prints the results such that
# categories are arranged in ascending order to an output file (categories.txt).
#######################################################################################

use Getopt::Long;    # need for command line options!
use Pod::Usage;      # need for command line options!

# CLI options HERE
my $IFILE1;          ## the file to parse data from
my $IFILE2;          ## the file to parse data from

#COMMAND LINE optins
# name of the program in $0
my $usage = "\n$0 [options]\n\n
Options:

    -file1         open the chromosome 21 gene data (chr21_genes.txt)
    -file2         open the chromosome 21 gene category data (chr21_genes_categories.txt)
    -help          Show this message

";

GetOptions(
	'file1=s' => \$IFILE1,
	'file2=s' => \$IFILE2,

	help => sub { pod2usage($usage); },    # different here, we put in $usage
) or pod2usage(2);

unless ($IFILE1) {
	die
	  "\nDying...Make sure to provide a file name\n",
	  $usage;
}

unless ($IFILE2) {
	die
	  "\nDying...Make sure to provide a file name\n",
	  $usage;
}

#Call the subroutine(getFh) to open the input file for reading and the output files for writing
my $fhIn1 = getFh( '<', $IFILE1 );
my $fhIn2 = getFh( '<', $IFILE2 );
my $fhOut = getFh( '>', 'OUTPUT/categories.txt' );

my %sym_cat;

while (<$fhIn1>) {
	next if $. < 2;
	chomp;

	#split columns by tab
	my @columns = split('\t');
	my $cat     = $columns[2];
	if ( defined $cat ) {
		if ( exists $sym_cat{$cat} ) {
			$sym_cat{$cat}++;
		}
		else {
			$sym_cat{$cat} = 1;
		}
	}
}

my %cat_info;

while (<$fhIn2>) {
	chomp;

	#split columns by tab
	my @columns = split('\t');
	my $cat     = $columns[0];
	my $info    = $columns[1];
	if ( defined $cat ) {
		$cat_info{$cat} = $info;
	}
}

say $fhOut "Catergory	Occurrence	Definition";

foreach ( sort { $a <=> $b } keys %sym_cat ) {
	say $fhOut "$_	$sym_cat{$_}	$cat_info{$_}";
}

